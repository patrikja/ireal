module Newton where

import Data.Number.IReal
import Data.Maybe
import Test.QuickCheck

-- Find zero of f with error at most 10^{-d}, starting from
-- enclosing interval i in which f' is non-zero and f has zero
-- or fail if these conditions do not hold.
newton0 :: Int -> (Dif IReal -> Dif IReal) -> IReal -> Maybe IReal
newton0 d f i = loop i
 where loop i = case intersection (m - prec (d+1) (unDif f m/dfi)) i of
                   Nothing -> Nothing
                   Just i'
                    |isWide i' ->  loop i'
                    |otherwise -> Just i'
            where dfi = deriv 1 f i
                  m   = mid i
                  isWide i = rad i >! recip (10^d) `atDecimals` d

-- Use precision that matches width of approximation.
newton d f i
  | d < 100 = newton0 d f i
  | otherwise = case newton (d * 10 `div` 18) f i of  -- expect quadratic convergence; have some margin
                  Nothing -> Nothing
                  Just i' -> newton0 d f i'

-- Find all zeros of f in interval i, each to d decimals.
allZeros d f i = b [i]
  where b (i:is)
           | abs (deriv 0 f i) >! 0 `atDecimals` d = b is
           | abs (deriv 1 f i) >! 0 `atDecimals` d  = case newton d f i of
                                                        Nothing ->  b (l:r:is)
                                                        Just r -> r : b is
           | otherwise = b (l:r:is)
           where l = lower i -+- mid i
                 r = mid i -+- upper i
        b [] = []

-- QuickCheck tests ------------------------------------------------------------

-- Test that the zero of \t -> t^2 - x for random x agrees with sqrt x to 300 decimals.
propSqr = do x <- uniformNum (1,1000)
             let y = fromJust $ newton 302 (\t -> t^2 - con x) (1 -+- x)
             return (y =?= sqrt x `atDecimals` 300)

-- Test that the zero of \t -> exp t - x for random x agrees with log x to 300 decimals.
propLog = do x <- uniformNum (1,2)
             let y = fromJust $ newton 302 (\t -> exp t - con x) (0 -+- 1)
             return (y =?= log x `atDecimals` 300)


{-
> import Data.Number.IReal
> let f x =3*cos (30 * x^2) - x^3
(0.00 secs, 1033864 bytes)
>  mapM_ (?100) $ allZeros 100 f  (0 +- 1)
-0.9918642339756801495819323753498908768793805488616481257325228050656349521502914372212708338150458221
-0.9485427414641069501003542830993825692930386451890308137592515210902947831065096220041444052376973769
-0.8818784872636750508811283226674602735393875438866430971271570234987730644246451315316669905817820833
-0.8288815226647069666969293312083007755408380070416699090911320747183875727754331563038527279061044645
-0.7557419937316142328684219035344708188816542242004158865484778590946027108568267487567136106551350145
-0.6891170095678843978766759505369993035454460896665698072224003791385303776544538831265754674014840381
-0.6033871728077396229470660343784921997153293003656100959332980995915225091354928794329841621834369964
-0.5131287250973980890378498891063209420264284800014136581486679964099559964088816089406378618268207519
-0.3954647740889970897813297349707587983916208158894735582289715256767471957583035734647501279913413049
-0.2291146254570803866248193673270824358454429271296292135832489261266156973341411639132434465995312122
0.2285328399714104000628001534599619573817247172605496204059625780855491679299338610744913775070459111
0.3972102963825749970476454033852137230508830084534203793494782386070324215424775708682258044949354635
0.5102186868468371692073106933702880909250608924054028426710120525312172018661979089333707458979146646
0.6074637022812925327130386489926856484423677224586242156898367088222718810315562086800986068908093363
0.6838701996139501267157398544393694677232337199954889950161706501370876205885213102743343021293342530
0.7621653412704649359536384198719781847229888080852471886816272185364581064597273548739029181722733874
0.8212721941335140787726324453668027011947239332740987967967752608442423601565240612686242449267037822
0.8906872508285937060603643412690278371168082469318404650757105369810957596498840408459768886273778658
0.9385160883563498057973589719423181714700314194412900097884854204200256682939514583509875197269608879
(0.25 secs, 101383712 bytes)

-}
